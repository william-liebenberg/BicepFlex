name: Build .NET Core Function App

on: [push, workflow_dispatch]

env:
  AZURE_RESOURCEGROUP_NAME: BicepFlexTest
  AZURE_RESOURCEGROUP_LOCATION: australiaeast
  API_NAME: bicepflex
  API_CODE_PATH: './src/api'
  API_OUTPUT_PATH: '${{ github.workspace }}/.output-api'
  API_ZIP_PATH: '${{ github.workspace }}/.zip-api'
  API_DOTNET_VERSION: '3.1.x'

jobs:
  lint_infra: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - shell: pwsh
      run: |
        az bicep build --file .azure/azureDeploy.bicep
  
  validate_infra: 
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Ensure test resource group exists
      shell: pwsh
      run: |
        $rgExists = az group exists -n ${{ env.AZURE_RESOURCEGROUP_NAME }}
        if ($rgExists -eq $false) {
          Write-Host "üî® Creating Resource Group ${{ env.AZURE_RESOURCEGROUP_NAME }}" -ForegroundColor Yellow
          $result = az group create -l ${{ env.AZURE_RESOURCEGROUP_LOCATION }} -n ${{ env.AZURE_RESOURCEGROUP_NAME }}
          if (!$?) {
            Write-Host "‚ùå Could not create Resource Group ${{ env.AZURE_RESOURCEGROUP_NAME }}" -ForegroundColor Red
            Write-Host $result -ForegroundColor Red
            return $false;
          }
          Write-Host "‚úÖ Created Resource Group ${{ env.AZURE_RESOURCEGROUP_NAME }}" -ForegroundColor Green
        }
        else {
          Write-Host "‚úÖ Resource Group ${{ env.AZURE_RESOURCEGROUP_NAME }} Exists" -ForegroundColor Green
        }
    - name: Validate Bicep
      shell: pwsh
      run: |
        az deployment group validate `
          -g ${{ env.AZURE_RESOURCEGROUP_NAME }} `
          --template-file .azure/azureDeploy.bicep `
          --parameters .azure/parameters.json

  preview_infra:
    runs-on: ubuntu-latest
    needs: [lint_infra, validate_infra]
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Run what-if
      shell: pwsh
      run: |
        az deployment group what-if `
          -g ${{ env.AZURE_RESOURCEGROUP_NAME }} `
          --template-file .azure/azureDeploy.bicep `
          --parameters .azure/parameters.json

  deploy_infra:
    runs-on: ubuntu-latest
    needs: [preview_infra]
    environment: test
    outputs:
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Test resource group
      id: deploy
      shell: pwsh
      run: |
        $deployment = (az deployment group create `
          -g ${{ env.AZURE_RESOURCEGROUP_NAME }} `
          --mode Incremental `
          --template-file .azure/azureDeploy.bicep `
          --parameters .azure/parameters.json)
        
        Write-Host $deployment 

  build_app:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - uses: actions/checkout@main

      # Setup .NET Core
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.API_DOTNET_VERSION }} 
      
      # Run dotnet to build/publish the API FunctionApp
      - name: Publish API
        run: |
          pushd './${{ env.API_CODE_PATH }}'
          dotnet publish BicepFlex.API.csproj --configuration Release --output ${{ env.API_OUTPUT_PATH }}
          popd

      - name: "Create ZIP"
        shell: pwsh
        run: |
          Get-ChildItem ${{ env.API_OUTPUT_PATH }} | Compress-Archive -Destination ${{ env.API_ZIP_PATH }}/${{ env.API_NAME }}.zip

      # Upload the API Artifact
      - name: 'Upload API FunctionApp Artifact'
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.API_NAME }}-artifact
          path: ${{ env.API_OUTPUT_PATH }}

  deploy_app:
    runs-on: ubuntu-latest
    needs: [deploy_infra, build_app]
    steps:
      # Checkout the repo
      - uses: actions/checkout@main

      # Get the funcapp zip artifact
      - name: Download Function App artifact
        uses: actions/download-artifact@v1
        with:
          name: funcapp
          path: ${{ env.API_ZIP_PATH }}
      
      # Log into Azure
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Upload the funcapp zip artifact to Azure 
      - name: "Upload FunctionApp"
        uses: Azure/functions-action@v1.4.4
        with:
          app-name: ${{needs.deploy_infra.outputs.functionAppName}}
          package: ${{ env.API_ZIP_PATH }}